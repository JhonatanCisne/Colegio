package com.Colegio.Colegio.La.Merced.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.Colegio.Colegio.La.Merced.dto.HorarioDTO;
import com.Colegio.Colegio.La.Merced.model.Horario;
import com.Colegio.Colegio.La.Merced.repository.HorarioRepository;
import com.Colegio.Colegio.La.Merced.repository.ProfesorRepository;
import com.Colegio.Colegio.La.Merced.repository.SeccionRepository;

@Service
public class HorarioService {

    @Autowired
    private HorarioRepository horarioRepository;

    @Autowired
    private SeccionRepository seccionRepository;
    @Autowired
    private ProfesorRepository profesorRepository;

    private HorarioDTO convertToDto(Horario horario) {
        HorarioDTO dto = new HorarioDTO();
        dto.setIdHorario(horario.getIdHorario());
        dto.setHora(horario.getHora());
        dto.setDia(horario.getDia());
        if (horario.getSeccion() != null) { // Corrected: use getSeccion()
            dto.setIdSeccion(horario.getSeccion().getIdSeccion());
        }
        if (horario.getProfesor() != null) { // Corrected: use getProfesor()
            dto.setIdProfesor(horario.getProfesor().getIdProfesor());
        }
        return dto;
    }

    private Horario convertToEntity(HorarioDTO dto) {
        Horario horario = new Horario();
        // For new entities, ID is typically generated by DB, so don't set it here.
        // horario.setIdHorario(dto.getIdHorario()); 
        horario.setHora(dto.getHora());
        horario.setDia(dto.getDia());

        if (dto.getIdSeccion() != null) {
            seccionRepository.findById(dto.getIdSeccion())
                .ifPresent(horario::setSeccion); // Corrected: use setSeccion()
        } else {
            horario.setSeccion(null); // Explicitly set to null if ID is not provided
        }
        if (dto.getIdProfesor() != null) {
            profesorRepository.findById(dto.getIdProfesor())
                .ifPresent(horario::setProfesor); // Corrected: use setProfesor()
        } else {
            horario.setProfesor(null); // Explicitly set to null if ID is not provided
        }
        return horario;
    }

    public List<HorarioDTO> getAllHorarios() {
        return horarioRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public Optional<HorarioDTO> getHorarioById(Integer id) {
        return horarioRepository.findById(id)
                .map(this::convertToDto);
    }

    public HorarioDTO createHorario(HorarioDTO horarioDTO) {
        Horario horario = convertToEntity(horarioDTO);
        Horario savedHorario = horarioRepository.save(horario);
        return convertToDto(savedHorario);
    }

    public Optional<HorarioDTO> updateHorario(Integer id, HorarioDTO horarioDTO) {
        return horarioRepository.findById(id).map(existingHorario -> {
            existingHorario.setHora(horarioDTO.getHora());
            existingHorario.setDia(horarioDTO.getDia());

            if (horarioDTO.getIdSeccion() != null) {
                seccionRepository.findById(horarioDTO.getIdSeccion())
                    .ifPresent(existingHorario::setSeccion); // Corrected: use setSeccion()
            } else {
                existingHorario.setSeccion(null);
            }

            if (horarioDTO.getIdProfesor() != null) {
                profesorRepository.findById(horarioDTO.getIdProfesor())
                    .ifPresent(existingHorario::setProfesor); // Corrected: use setProfesor()
            } else {
                existingHorario.setProfesor(null);
            }
            
            Horario updatedHorario = horarioRepository.save(existingHorario);
            return convertToDto(updatedHorario);
        });
    }

    public boolean deleteHorario(Integer id) {
        if (horarioRepository.existsById(id)) {
            horarioRepository.deleteById(id);
            return true;
        }
        return false;
    }
}